{
    "extends": [
        // By extending from a plugin config, we can get recommended rules without having to add them manually.
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:jsx-a11y/recommended",
        "plugin:@typescript-eslint/recommended",
        // This disables the formatting rules in ESLint that Prettier is going to be responsible for handling.
        // Make sure it's always the last config, so it gets the chance to override other configs.
        "eslint-config-prettier"
    ],
    "settings": {
        "react": {
            // Tells eslint-plugin-react to automatically detect the version of React to use.
            "version": "detect"
        },
        // Tells eslint how to resolve imports
        "import/resolver": {
            "node": {
                "extensions": [".js", ".jsx", ".ts", ".tsx"]
            },
            "typescript": {}
        },
        "typescript": true,
        "node": true
    },
    "plugins": ["import", "react", "@typescript-eslint", "autofix", "react-hooks"],
    "rules": {
        // Add your own rules here to override ones from the extended configs.
        "import/no-unresolved": [2, { "commonjs": true, "amd": true }],
        "import/named": 2,
        "import/namespace": 2,
        "import/default": 2,
        "import/export": 2,
        "react/react-in-jsx-scope": "off",
        "react-hooks/exhaustive-deps": "error",
        "arrow-body-style": ["error", "as-needed"],
        "react/self-closing-comp": [
            "error",
            {
                "component": true,
                "html": true
            }
        ],
        "autofix/no-unused-vars": [
            "error",
            {
                "argsIgnorePattern": "^_",
                "ignoreRestSiblings": true,
                "destructuredArrayIgnorePattern": "^_"
            }
        ],
        "@typescript-eslint/consistent-type-imports": [
            "error",
            {
                "prefer": "type-imports"
            }
        ],
        "import/order": [
            "error",
            {
                "newlines-between": "always",
                "groups": ["builtin", "external", "parent", "sibling", "index", "object", "type"],
                "pathGroups": [
                    {
                        "pattern": "@/**/**",
                        "group": "parent",
                        "position": "before"
                    }
                ],
                "alphabetize": { "order": "asc" }
            }
        ]
    }
}
